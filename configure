#!/bin/sh
# See LICENSE file for copyright and license details

usage() {
cat <<EOF
usage: $0 [options]

standard options:
  --help|-h                print this message
  --prefix=PREFIX          install prefix for files [$prefix]
  --execprefix=EPREFIX     install prefix for binaries [$execprefix]
  --incdir=DIR             install directory for headers [$incdir]
  --libdir=DIR             install directory for library [$libdir]

advanced options:
  --extra-cflags="FLAGS"   extra compiler flags [$extra_cflags]

cross build options:
  --cross-prefix=PREFIX    cross toolchain prefix [$cross_prefix]

environment variables:
  AR                       archiver [$AR]
  CC                       compiler [$CC]
  CFLAGS                   compiler flags [$CFLAGS]
  ARCH_CFLAGS              arch compiler flags [$ARCH_CFLAGS]
EOF
exit 0
}

default() { test -n "$2" && eval : \${$1:=\$2} ; }
echo() { printf "%s\n" "$*" ; }
fail() { echo "$*" ; exit 1 ; }
quote() { printf "'%s'" "$(printf "%s" "$1" | sed "s/'/'\\\\''/g")"; }
trycc() {
$CC "$@" -x c -fsyntax-only - >/dev/null 2>&1 <<'EOF'
int main(void){return 0;}
EOF
}

cross_prefix="riscv32-unknown-elf-"

default AR "${cross_prefix}ar"
default CC "${cross_prefix}gcc"

topsrc=$(dirname "$0")
topsrc=${topsrc%/}

cmdline="$(quote "$0")"
for arg do
  cmdline="$cmdline $(quote "$arg")"
  case "$arg" in
  --prefix=*) prefix=${arg#*=} ;;
  --execprefix=*) execprefix=${arg#*=} ;;
  --incdir=*) incdir=${arg#*=} ;;
  --libdir=*) libdir=${arg#*=} ;;
  --cross-prefix=*) cross_prefix=${arg#*=} ;;
  --extra-cflags=*) extra_cflags=${arg#*=} ;;
  --help|-h) show_usage=yes ;;
  *) fail "error: unrecognized option $arg" ;;
  esac
done

default prefix "/usr/local"
default execprefix "${prefix}"
default incdir "${prefix}/include"
default libdir "${execprefix}/lib"

default CFLAGS "-std=c99 -pipe -Os -Wall -Wextra -Wpedantic"
default ARCH_CFLAGS "-mabi=ilp32 -march=rv32imac_zicsr -mtune=sifive-e31 \
-mcmodel=medlow"

if test x"$show_usage" = "xyes" ; then
  usage
fi

if ! trycc ; then
  fail "error: compiler '$CC' cannot parse a trivial program"
fi

echo "archiver            $AR"
echo "compiler            $CC"
echo "include directory   $incdir"
echo "library directory   $libdir"

case "$topsrc" in
   .) TOPSRC="\$(TOP)" ;;
  /*) TOPSRC="$topsrc" ;;
   *) TOPSRC="\$(TOP)/$topsrc" ;;
esac

printf "creating config.mak... "
cat >config.mak <<EOF
# this version of config.mak was generated by:
# $cmdline
# any changes will be lost if '$0' is re-run
INCDIR=$incdir
LIBDIR=$libdir
AR=$AR
CC=$CC
CFLAGS=$CFLAGS $ARCH_CFLAGS $extra_cflags
TOPSRC=$TOPSRC
EOF
echo "done"
